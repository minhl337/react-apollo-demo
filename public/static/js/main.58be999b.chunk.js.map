{"version":3,"sources":["share.jpg","components/MissionKey.js","components/LaunchItem.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MissionKey","className","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","classNames","format","to","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","item","key","LAUNCH_QUERY","Launch","params","match","parseInt","variables","flight","launch_year","rocket","rocket_id","rocket_name","rocket_type","id","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.58be999b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/share.f2b1b847.jpg\";","import React from 'react';\n\nexport default function MissionKey() {\n  return (\n    <div className='my-3'>\n      <p>\n        <span className='px-3 mr-2 bg-success' /> = Success\n      </p>\n      <p>\n        <span className='px-3 mr-2 bg-danger' /> = Fail\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst LaunchItem = ({\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\n}) => {\n  return (\n    <div className='card card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-9'>\n          <h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success,\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format='YYYY-MM-DD HH:mm'>{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className='col-md-3'>\n          <Link to={`/launch/${flight_number}`} className='btn btn-secondary'>\n            Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","import React, { Component } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport MissionKey from './MissionKey';\n\nimport LaunchItem from './LaunchItem';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n  if (loading) return <p>Loading</p>;\n  if (error) console.log(error);\n\n  return (\n    <>\n      <h1>Launches</h1>\n      <MissionKey />\n      {data.launches.map((item) => {\n        return <LaunchItem key={item.flight_number} launch={item} />;\n      })}\n    </>\n  );\n};\n\nexport default Launches;\n","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n        id\n      }\n    }\n  }\n`;\nexport default function Launch({ match: { params } }) {\n  const flight_number = parseInt(params.flight_number);\n  console.log(flight_number);\n\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: { flight_number },\n  });\n\n  if (loading) return <p>Loading</p>;\n  if (error) console.log(error);\n\n  console.log(data);\n  const {\n    mission_name,\n    flight_number: flight,\n    launch_year,\n    launch_date_local,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type, id },\n  } = data.launch;\n\n  return (\n    <>\n      <h1 className='display-4 my-3'>\n        Mission: <span className='text-dark'>{mission_name}</span>\n      </h1>\n      <h4 className='mb-3'>Launch Details</h4>\n      <ul className='list-group'>\n        <li className='list-group-item'>Flight Number: {flight}</li>\n        <li className='list-group-item'>Launch Year: {launch_year}</li>\n        <li className='list-group-item'>\n          Launch Successful:{' '}\n          <span\n            className={classNames({\n              'text-success': launch_success,\n              'text-danger': !launch_success,\n            })}\n          >\n            {launch_success ? 'yes' : 'no'}\n          </span>\n        </li>\n      </ul>\n      <h4 className='my-3'>Rocket Details</h4>\n      <ul className='list-group'>\n        <li className='list-group-item'>Rocket Name: {rocket_name}</li>\n        <li className='list-group-item'>Rocket ID: {rocket_id}</li>\n        <li className='list-group-item'>Rocekt Name: {rocket_type}</li>\n      </ul>\n      <hr></hr>\n      <Link to='/' className='btn btn-secondary'>\n        Home\n      </Link>\n    </>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport logo from './share.jpg';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className='container'>\n          <img\n            src={logo}\n            alt='SpaceX'\n            style={{ width: 300, display: 'block', margin: 'auto' }}\n          />\n          <Route exact path='/' component={Launches} />\n          <Route exact path='/launch/:flight_number' component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}